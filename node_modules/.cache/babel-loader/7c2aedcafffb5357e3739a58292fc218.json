{"ast":null,"code":"var _jsxFileName = \"/Users/apple/Desktop/react-application-tutorial/react-application-practice/practice_code/react-application-forms/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport useInput from \"../hooks/use-input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const {\n    value: enteredName,\n    isValid: enteredNameisValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameBlurHandler,\n    reset: resetNameInput\n  } = useInput(value => value.trim() !== '');\n  const [enterdEmail, setEnteredEmail] = useState('');\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n  const enteredEmailIsValid = enterdEmail.includes('@'); // regex validation required\n\n  const enteredEmailIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n  let formIsValid = false; // useEffect(() => {\n\n  if (enteredNameisValid && enteredEmailIsValid) {\n    // can other properties if it is der like enteredAgeisValid\n    formIsValid = true;\n  }\n\n  const emailInputChangeHandler = event => {\n    setEnteredEmail(event.target.value);\n  };\n\n  const emailInputBlurHandler = event => {\n    setEnteredEmailTouched(true);\n  };\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n    setEnteredNameTouched(true);\n\n    if (!enteredNameisValid) {\n      return;\n    } // const enteredValue = nameInputRef.current.value\n    // console.log(enteredValue);\n    // nameInputRef.current.value = '';\n\n\n    setEnteredName('');\n    setEnteredEmail('');\n    setEnteredNameTouched(false);\n    setEnteredEmailTouched(false);\n  };\n\n  const nameInputClasses = nameInputIsInvalid ? 'form-control invalid' : 'form-control';\n  const emailInputClasses = enteredEmailIsInvalid ? 'form-control invalid' : 'form-control';\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        // ref={nameInputRef}\n        value: enteredName,\n        type: \"text\",\n        id: \"name\",\n        onBlur: nameBlurHandler,\n        onChange: nameChangeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 32\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        // ref={nameInputRef}\n        value: enterdEmail,\n        type: \"email\",\n        id: \"email\",\n        onBlur: emailInputBlurHandler,\n        onChange: emailInputChangeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), nameInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Please enter a valid email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"h30i3dL4PMSyWxF1sin33DcYk64=\", false, function () {\n  return [useInput];\n});\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["/Users/apple/Desktop/react-application-tutorial/react-application-practice/practice_code/react-application-forms/src/components/SimpleInput.js"],"names":["useEffect","useState","useInput","SimpleInput","props","value","enteredName","isValid","enteredNameisValid","hasError","nameInputHasError","valueChangeHandler","nameChangeHandler","inputBlurHandler","nameBlurHandler","reset","resetNameInput","trim","enterdEmail","setEnteredEmail","enteredEmailTouched","setEnteredEmailTouched","enteredEmailIsValid","includes","enteredEmailIsInvalid","formIsValid","emailInputChangeHandler","event","target","emailInputBlurHandler","formSubmissionHandler","preventDefault","setEnteredNameTouched","setEnteredName","nameInputClasses","nameInputIsInvalid","emailInputClasses"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\n\nimport useInput from \"../hooks/use-input\";\n\nconst SimpleInput = (props) => {\n  const {\n    value: enteredName,\n    isValid:enteredNameisValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameBlurHandler,\n    reset:resetNameInput\n  } = useInput(value => value.trim() !== '');\n\n\n  const [enterdEmail, setEnteredEmail] = useState('');\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n\n\n  const enteredEmailIsValid = enterdEmail.includes('@'); // regex validation required\n  const enteredEmailIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n\n\n\n\n  let formIsValid = false;\n\n  // useEffect(() => {\n  if (enteredNameisValid && enteredEmailIsValid) { // can other properties if it is der like enteredAgeisValid\n    formIsValid = true;\n  }\n\n\n  const emailInputChangeHandler = event => {\n    setEnteredEmail(event.target.value);\n  };\n\n  const emailInputBlurHandler = event => {\n    setEnteredEmailTouched(true);\n  }\n\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n    setEnteredNameTouched(true);\n\n    if (!enteredNameisValid) {\n      return;\n    }\n    // const enteredValue = nameInputRef.current.value\n    // console.log(enteredValue);\n\n    // nameInputRef.current.value = '';\n    setEnteredName('');\n    setEnteredEmail('');\n    setEnteredNameTouched(false);\n    setEnteredEmailTouched(false);\n  }\n\n\n\n  const nameInputClasses = nameInputIsInvalid ? 'form-control invalid' : 'form-control';\n  const emailInputClasses = enteredEmailIsInvalid ? 'form-control invalid' : 'form-control';\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Your Name</label>\n        <input\n          // ref={nameInputRef}\n          value={enteredName}\n          type='text'\n          id='name'\n          onBlur={nameBlurHandler}\n          onChange={nameChangeHandler} />\n\n        {nameInputIsInvalid && <p className={\"error-text\"}>Name must not be empty.</p>}\n      </div>\n\n      <div className={emailInputClasses}>\n        <label htmlFor='name'>Your Email</label>\n        <input\n          // ref={nameInputRef}\n          value={enterdEmail}\n          type='email'\n          id='email'\n          onBlur={emailInputBlurHandler}\n          onChange={emailInputChangeHandler} />\n\n        {nameInputHasError && <p className={\"error-text\"}>Please enter a valid email</p>}\n      </div>\n\n\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"]},"metadata":{},"sourceType":"module"}